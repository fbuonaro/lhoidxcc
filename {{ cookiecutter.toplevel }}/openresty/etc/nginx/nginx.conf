worker_processes    2;
pid                 openresty.pid;

events
{
    worker_connections  1024;
}

http
{
    include             mime.types;
    default_type        application/octet-stream;
    keepalive_timeout   65;
    sendfile            on;
    # to resolve names to ips
    # local=on is an openresty feature to direct nginx to /etc/resolv.conf
    resolver            local=on;
    server_tokens       off;
    autoindex           off;

    ############################################################
    # docker stuff
    # https://github.com/openresty/docker-openresty/issues/119
    ############################################################
    client_body_temp_path /var/run/openresty/nginx-client-body;
    proxy_temp_path       /var/run/openresty/nginx-proxy;
    fastcgi_temp_path     /var/run/openresty/nginx-fastcgi;
    uwsgi_temp_path       /var/run/openresty/nginx-uwsgi;
    scgi_temp_path        /var/run/openresty/nginx-scgi;

    ############################################################
    # logging
    ############################################################
    log_format  main                                        '$time_local: '
                                                            '[$request_method'
                                                            '|$status'
                                                            '|$scheme'
                                                            '|$host'
                                                            '|$request_uri'
                                                            '|$request_time'
                                                            '|$remote_user|$http_referrer'
                                                            '|$remote_addr:$remote_port'
                                                            '|$request_length|$bytes_sent'
                                                            ']';
    access_log  /usr/local/openresty/nginx/logs/access.log  main;
    error_log   /usr/local/openresty/nginx/logs/error.log   debug;

    ############################################################
    # lua lvm setup
    ############################################################
    lua_package_path    "/usr/local/openresty/nginx/conf/conf.d/?.lua;;";

    # DEV only
    # lua_code_cache off;
    # NOTE that when lua_code_cache is off the session_secret
    # must be defined outside of lua
    # when using client side encrypted cookies i.e.
    # server { .. set $session_secret 623q4hR325t36VsCD3g567922IC0073T; }

    init_by_lua_block {
        -- TODO - support multiple op/opts tuples
        require ( "lhauth" ).load_opts( "keycloak", "/openresty/opts/keycloak_opts.json" )
    }

    ############################################################
    # ssl
    ############################################################
    lua_ssl_verify_depth            2;
    lua_ssl_trusted_certificate     /etc/x509/https/ca.crt;

    ssl_certificate                 /etc/x509/https/tls.crt;
    ssl_certificate_key             /etc/x509/https/tls.key;
    ssl_dhparam                     /openresty/ssl/dhparam.pem;

    ssl_session_cache               shared:SSL:10m;
    ssl_session_timeout             10m;

    # START BLOCK from https://cipherli.st/
    # and https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html

    ssl_protocols               TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers   on;
    ssl_ciphers                 "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
    ssl_ecdh_curve              secp384r1;
    ssl_session_cache           shared:SSL:10m;
    ssl_session_tickets         off;
    ssl_stapling                on;
    ssl_stapling_verify         on;

    # END BLOCK https://cipherli.st/

    ############################################################
    # default listeners
    ############################################################
    # abort connections for requests without a Host header field
    server {
        listen          80;
        server_name     "";
        return 444;
    }

    # redirect all connections to https
    server {
        listen          80      default_server;
        return          301     https://$host$request_uri;
    }

    # include specific server configurations
    include             conf.d/*.conf;
}
